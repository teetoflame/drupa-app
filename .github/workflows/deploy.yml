      - name: Remove Existing AWS Resources if Needed
        run: |
          echo "Checking if DB Subnet Group exists..."
          if aws rds describe-db-subnet-groups --db-subnet-group-name drupal-db-subnet &> /dev/null; then
            DB_IN_USE=$(aws rds describe-db-instances --query 'DBInstances[*].DBSubnetGroup.DBSubnetGroupName' --output text | grep -w "drupal-db-subnet" || echo "NOT_IN_USE")
            if [[ "$DB_IN_USE" != "NOT_IN_USE" ]]; then
              echo "DB Subnet Group is in use by an RDS instance. Skipping deletion."
            else
              echo "Deleting existing DB Subnet Group..."
              aws rds delete-db-subnet-group --db-subnet-group-name drupal-db-subnet
              sleep 30  # Wait for deletion
            fi
          else
            echo "DB Subnet Group does not exist. Skipping..."
          fi

          echo "Checking if Target Group exists..."
          TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names drupal-tg --query "TargetGroups[0].TargetGroupArn" --output text 2>/dev/null || echo "NOT_FOUND")
          
          if [[ "$TARGET_GROUP_ARN" != "NOT_FOUND" ]]; then
            echo "Target Group is in use. Deregistering from ALB listeners..."

            # Find ALB listener using this Target Group
            LISTENERS=$(aws elbv2 describe-listeners --query "Listeners[*].ListenerArn" --output text)
            for LISTENER_ARN in $LISTENERS; do
              RULES=$(aws elbv2 describe-rules --listener-arn "$LISTENER_ARN" --query "Rules[*].RuleArn" --output text)
              for RULE_ARN in $RULES; do
                if aws elbv2 describe-rules --rule-arns "$RULE_ARN" --query "Rules[*].Actions[*].TargetGroupArn" --output text | grep -q "$TARGET_GROUP_ARN"; then
                  echo "Deleting rule $RULE_ARN associated with Target Group..."
                  aws elbv2 delete-rule --rule-arn "$RULE_ARN"
                  sleep 5
                fi
              done
            done

            # Delete listener if it uses this Target Group
            for LISTENER_ARN in $LISTENERS; do
              TG_IN_LISTENER=$(aws elbv2 describe-listeners --listener-arn "$LISTENER_ARN" --query "Listeners[*].DefaultActions[*].TargetGroupArn" --output text | grep -q "$TARGET_GROUP_ARN" && echo "IN_USE" || echo "NOT_IN_USE")
              if [[ "$TG_IN_LISTENER" == "IN_USE" ]]; then
                echo "Deleting listener $LISTENER_ARN associated with Target Group..."
                aws elbv2 delete-listener --listener-arn "$LISTENER_ARN"
                sleep 10
              fi
            done

            echo "Deleting Target Group..."
            aws elbv2 delete-target-group --target-group-arn "$TARGET_GROUP_ARN"
            sleep 30  # Wait for deletion
          else
            echo "Target Group does not exist. Skipping..."
          fi
        working-directory: ./terraform
